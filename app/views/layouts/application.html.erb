<!DOCTYPE html>
<html lang="<%= I18n.locale.to_s.downcase %>">
  <head>
    <link rel="preload" as="script" href="/js/vendor.js">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400;700&display=swap" rel="stylesheet">
    <!-- @see: https://developers.google.com/analytics/devguides/collection/gtagjs -->
    <%= render "shared/analytics" %>
    <meta charset='utf-8'>
    <!-- user agent -->
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= render "shared/metas" %>
    <%= render "shared/favicons" %>
    <%= stylesheet_link_tag 'application', media: 'all' %>
    <%= yield :jsonld %>
  </head>
  <body class="light-mode" data-theme="dark">
    <%= render "shared/preloader" %>
    <%= render "shared/top-nav" %>
    <%= render "shared/side-menu" %>
    <main id="app"><%= yield %></main>
    <script src="/js/vendor.js"></script>
    <%= javascript_pack_tag 'application' %>
    <script type="module">
    class Particle {
      constructor(args) {
        this.cursor = args.cursor || false;
        this.position = {
          x: args.position.x,
          y: args.position.y
        };
        this.radius = args.radius || 20;
        this.moveSpeed = this.cursor.distance || 10;
        this.rotation = args.rotation || this.cursor.angle || 0;
        this.width = 1;
        this.height = 1;
        this.baseSize = 20;
        this.speedMorph = 1;
        this.speedMorphScale = args.speedMorphScale || 5;
        this.frame = args.frame || 0;
        this.motionFrequency = args.motionFrequency || 0.16;
        this.motionAmplitude = args.motionAmplitude || 3;
        this.rotationAmplitudeX = 0;
        this.rotationAmplitudeY = 1;
        this.lifespan = args.lifespan || 500;
        this.motionLife = 1;
        this.mortality = args.mortality || false;
        this.getSpeedMorph();
        this.applySpeedMorph();
      }

      animate() {
        if (this.lifespan > 0) {
          this.getRotationAmplitude();
          this.position.x += (Math.cos( this.frame ) * (this.motionAmplitude * this.rotationAmplitudeX) ) * this.motionLife;
          this.position.y += (Math.cos( this.frame ) * (this.motionAmplitude * this.rotationAmplitudeY) ) * this.motionLife;
          this.frame += this.motionFrequency;
          if (this.mortality) this.fadeAnimation();
        }
      }

      getSpeedMorph() {
        let _dist = this.cursor.distance;
        let _min = 20;
        let _max_distance = 150;
        let _total = _dist / _max_distance;
        this.speedMorph = Number( Math.min(_total, _min).toFixed(2) );
      }

      applySpeedMorph() {
        this.width = this.baseSize + (this.baseSize * this.speedMorph * this.speedMorphScale);
        this.height = this.baseSize;
      }

      fadeAnimation() {
        this.motionLife -= (this.motionLife / this.lifespan);
        this.lifespan--;
      }

      getRotationAmplitude() {
        this.rotationAmplitudeX = Number( -Math.sin(this.rotation + Math.PI/4).toFixed(2) );
        this.rotationAmplitudeY = Number( Math.cos(this.rotation + Math.PI/4).toFixed(2) );
      }
    }

    class Controls {
        constructor(_stage) {
            this.stage = _stage;
            this.events();
        }
        events() {
            window["clear-btn"].addEventListener("click", (e) => {
                this.stage.reset();
            });
            window.addEventListener("keyup", (e) => {
                switch (e.keyCode) {
                    /* ESC */
                    case 27:
                        this.stage.reset();
                        break;
                        /* ENTER */
                    case 13:
                        this.save();
                        break;
                        /* Flecha Izquierda */
                    case 37:
                        this.undo();
                        break;
                        /* Flecha Derecha */
                    case 39:
                        this.redo();
                        break;
                        /* "x" */
                    case 88:
                        this.toggleXRay();
                        break;
                    /* "barra espaciadora" */
                    case 32:
                        if(this.disperse) this.disperse();
                        break;
                }
            });
            // grid selector
            let gridInput = document.querySelectorAll(".grid-input");
            for (let i = 0; i < gridInput.length; i++) {
                gridInput[i].addEventListener("click", (e) => {
                    let _grid = e.target.getAttribute("data-grid");
                    window["guides-layer"].setAttribute("data-grid", _grid);
                });
            }
        }

        undo() {
            // Se ejecuta solo si hay formas que borrar
            if (this.stage.shapes.length > 0) {
                // Remueve la última figura de lo que se está dibujando y la guarda
                let _removedShape = this.stage.shapes.pop();
                this.stage.undoneShapes.push(_removedShape);
            }
            // Se ejecuta solo si hay partículas que borrar
            if (this.stage.particleShapes && this.stage.particleShapes.length > 0) {
                let _removedParticleShape = this.stage.particleShapes.pop();
                this.stage.undoneParticleShapes.push(_removedParticleShape);
            }
        }

        redo() {
            // Se ejecuta solo si hay formas que re-dibujar
            if (this.stage.undoneShapes && this.stage.undoneShapes.length > 0) {
                // Selecciona la última figura guardada y la agrega al "array" para que sea dibujada
                let _rescuedShape = this.stage.undoneShapes.pop();
                this.stage.shapes.push(_rescuedShape);
            }
            // Se ejecuta solo si hay partículas que re-dibujar
            if (this.stage.undoneParticleShapes && this.stage.undoneParticleShapes.length > 0) {
                let _rescuedParticleShape = this.stage.undoneParticleShapes.pop();
                this.stage.particleShapes.push(_rescuedParticleShape);
            }
        }

        toggleXRay() {
            this.stage.drawLines = !this.stage.drawLines;
        }

        disperse() {
          this.stage.disperse();
        }
        save() {
            window["letrism_img"].value = this.stage.screenshot();
            window["letrism_paths"].value = this.stage.data();
        }
    }
    </script>
  </body>
</html>